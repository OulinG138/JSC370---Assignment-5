library(tidyverse)
package.install(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(dplyr)
library(ggplot2)
mtcars %>% ggplot(aes(x = mpg, y = cyl)) +
geom_point()
# Using the built-in `mtcars` dataset
data(mtcars)
# Create a scatter plot of `mpg` (miles per gallon) vs. `wt` (weight of car)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
install.packages("labeling")
# Using the built-in `mtcars` dataset
data(mtcars)
# Create a scatter plot of `mpg` (miles per gallon) vs. `wt` (weight of car)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
install.packages("styler")
install.packages("formatR")
install.packages("r.nvim")
library(styler)
library(r.nvim)
library(remotes)
remotes::install_github("devOpifex/r.nvim")
remotes::install_github("devOpifex/r.nvim")
install.packages("ps")
install.packages("processx")
remotes::install_github("devOpifex/r.nvim")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
install.packages("yaml")
print("Hello World")
print("Hello World")
print("Hello World")
print("Hello World")
print("Hello World")
```{r}
print("Hello World")
print("Hello World")
styler:::style_active_file()
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_pkg()
styler:::style_active_file()
library(tidyverse)
names(mtcars)
mtcars %>% ggplot(aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm")
iris %>% glimpse()
library(tidyverse)
iris %>%
select(Sepal.Length) %>%
head()
styler:::style_active_file()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# loading data
casualties <- read_csv("data/nigthingale.csv")
# loading data
library(HistData)
# casualties <- read_csv("data/nigthingale.csv")
# create your visualization here
# you can save your plot by calling ggplot() after generatin each plot
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("data/nigthingale.csv")
install.packages("bit")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# loading data
library(HistData)
# casualties <- read_csv("data/nigthingale.csv")
# create your visualization here
# you can save your plot by calling ggplot() after generatin each plot
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("./data/nigthingale.csv")
Nightingale |>
select(Date, Wounds, Disease, Other, Army) |>
mutate(Date = paste(
str_pad(month(Date), 2, pad = "0"), year(Date), sep = "/")) |>
write_csv("data/nigthingale.csv")
knitr::opts_chunk$set(echo = FALSE, include = TRUE, eval = TRUE)
required_packages <- c("lubridate", "sf", "tidyverse")
for (p in required_packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p, character.only = TRUE)
}
}
library(tidyverse)
library(sf)
library(here)
source(here("../scripts", "helpers.R"))
bike_thefts <- load_geojson("../data/processed/Cleaned_Bicycle_Thefts.geojson")
bike_thefts %>% glimpse()
monthly_thefts <- bike_thefts %>%
mutate(
occurrence_date = make_date(year = OCC_YEAR, month = match(OCC_MONTH, month.name), day = 1)
) %>%
group_by(occurrence_date) %>%
summarise(total_thefts = n(), .groups = "drop")
# Plotting the monthly trend of bicycle thefts
ggplot(monthly_thefts, aes(x = occurrence_date, y = total_thefts)) +
geom_line(color = "dodgerblue", size = 1.2) +
scale_x_date(
date_labels = "%b %Y", # Format x-axis as "Month Year"
date_breaks = "6 months" # Set major ticks every 6 months
) +
labs(
title = "Monthly Trend of Bicycle Thefts in Toronto",
x = "Date",
y = "Total Thefts",
caption = "Data Source: Toronto Police Service (2014-2024)"
) +
theme_minimal(base_size = 14) + # Set base font size
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
plot.title = element_text(hjust = 0.5, face = "bold", size = 16), # Center and bold the title
plot.caption = element_text(hjust = 1) # Right-align the caption
)
# Plotting the monthly trend of bicycle thefts
ggplot(monthly_thefts, aes(x = occurrence_date, y = total_thefts)) +
geom_line(color = "dodgerblue", linewidth = 1.2) +
scale_x_date(
date_labels = "%b %Y", # Format x-axis as "Month Year"
date_breaks = "6 months" # Set major ticks every 6 months
) +
labs(
title = "Monthly Trend of Bicycle Thefts in Toronto",
x = "Date",
y = "Total Thefts",
caption = "Data Source: Toronto Police Service (2014-2024)"
) +
theme_minimal(base_size = 14) + # Set base font size
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
plot.title = element_text(hjust = 0.5, face = "bold", size = 16), # Center and bold the title
plot.caption = element_text(hjust = 1) # Right-align the caption
)
source(here("scripts", "helpers.R"))
library(here)
knitr::opts_chunk$set(echo = FALSE, include = TRUE, eval = TRUE)
required_packages <- c("lubridate", "sf", "tidyverse")
for (p in required_packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p, character.only = TRUE)
}
}
library(viridis)
library(tidyverse)
library(sf)
library(here)
library(tmap)
library(scales)
library(patchwork)
source(here("scripts", "helpers.R"))
bike_thefts <- load_bike_theft_geojson(here("data", "processed", "Cleaned_Bicycle_Thefts.geojson"))
bike_thefts %>% glimpse()
monthly_thefts <- bike_thefts %>%
mutate(
occurrence_date = make_date(year = OCC_YEAR, month = match(OCC_MONTH, month.name), day = 1)
) %>%
group_by(occurrence_date) %>%
summarise(total_thefts = n(), .groups = "drop")
# Plotting the monthly trend of bicycle thefts
ggplot(monthly_thefts, aes(x = occurrence_date, y = total_thefts)) +
geom_line(color = "dodgerblue", size = 1.2) +
scale_x_date(
date_labels = "%b %Y", # Format x-axis as "Month Year"
date_breaks = "6 months" # Set major ticks every 6 months
) +
labs(
x = "Date",
y = "Total Thefts",
) +
theme_minimal(base_size = 14) + # Set base font size
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels
)
toronto_map <- read_sf(here("data", "raw", "Toronto Neighbourhoods Historical 140.geojson"))
bike_thefts <- bike_thefts %>%
rename(AREA_NAME = NEIGHBOURHOOD_140)
bike_thefts %>% glimpse()
merged_map <- toronto_map %>%
st_join(bike_thefts, join = st_intersects, suffix = c("", "_new"))
merged_map %>% glimpse()
theft_by_neighborhood <- merged_map %>%
group_by(AREA_NAME) %>%
summarise(
theft_count = n(),
.groups = "drop"
)
I'll solve part (d) of the noninferiority trial problem, which involves calculating the required sample size for a specific scenario.
## Question 1(d) Solution
**A group of university researchers are interested in establishing non-inferiority of a test drug compared to the standard treatment. The response rate of the standard drug for resistant depression is 40%, and they consider a difference of -0.10 to be clinically important. They assume that the true difference in response rate between treatment groups is 0.18. An equal number of subjects will be recruited into both treatment groups. How many subjects should be recruited into each treatment group so that the study has 90% power at the 5% significance level?**
For this problem:
- $p_2 = 0.40$ (response rate of standard drug)
- $p_1 = 0.40 + 0.18 = 0.58$ (response rate of test drug)
- $\delta = -0.10$ (noninferiority margin)
# Print results
cat("Required sample size for each group:", n2, "subjects")
# Parameters for noninferiority trial
p1 <- 0.58  # Response rate of experimental treatment
p2 <- 0.40  # Response rate of standard treatment
delta <- -0.10  # Noninferiority margin
theta <- 0.18  # True difference in response rates
alpha <- 0.05  # Significance level
beta <- 0.10  # Type II error rate (1-power)
r <- 1  # Ratio of sample sizes (n1 = r*n2)
# Calculate critical values
z_alpha <- qnorm(1 - alpha)  # One-sided test
z_beta <- qnorm(1 - beta)
# Calculate sample size using formula from part (c)
n2 <- ((z_alpha + z_beta)^2)/((theta - delta)^2) * (p1*(1-p1)/r + p2*(1-p2))
# Round up to nearest whole number
n2 <- ceiling(n2)
# Print results
cat("Required sample size for each group:", n2, "subjects")
knitr::opts_chunk$set(eval = FALSE, include  = TRUE)
library(tidyverse)
library(plotly)
library(widgetframe)
library(tidytext)
sb_locs <- read_csv("https://raw.githubusercontent.com/JSC370/JSC370-2025/refs/heads/main/data/starbucks/starbucks-locations.csv")
sb_nutr <- read_csv("https://raw.githubusercontent.com/JSC370/JSC370-2025/refs/heads/main/data/starbucks/starbucks-menu-nutrition.csv")
usa_pop <- read_csv("https://raw.githubusercontent.com/JSC370/JSC370-2025/refs/heads/main/data/starbucks/us_state_pop.csv")
usa_states<-read_csv("https://raw.githubusercontent.com/JSC370/JSC370-2025/refs/heads/main/data/starbucks/states.csv")
print(colnames(sb_locs))
print(colnames(sb_nutr))
print(colnames(usa_pop))
print(colnames(usa_states))
sb_usa <- sb_locs |> filter(Country == "US")
sb_locs_state <- sb_usa |>
rename(state = "State/Province") |>
group_by(state) |>
summarize(nstore = n())
# need state abbreviations
usa_pop_abbr <-
full_join(usa_pop, usa_states,
by = join_by(state == State)
)
sb_locs_state <- full_join(sb_locs_state, usa_pop_abbr, by = join_by(state == Abbreviation))
sb_locs_state <- sb_locs_state |> rename(state_name = "state.y")
p1 <- ggplot(sb_locs_state, aes(x=population, y=nstore, colour=state)) +
geom_point(alpha = 0.8) +
theme_minimal()
ggplotly(p1)
p2 <- ggplot(sb_nutr, aes(x=Calories, fill=Category)) +
geom_histogram(alpha = 0.5, bins=30) +
theme_minimal()
ggplotly(p2)
p3 <- sb_nutr |>
unnest_tokens(word, Item, token="words") |>
count(word, sort = T) |>
head(20) |>
ggplot(aes(fct_reorder(word, n), n)) +
geom_col() +
coord_flip() +
theme_minimal()
ggplotly(p3)
sb_nutr |>
plot_ly(x = ~Calories, y = ~`Carb. (g)`,
type = "scatter", mode = "markers", color = ~Category)
tokens <- sb_nutr |>
unnest_tokens(word, Item, token="words")
topwords <- tokens |>
group_by(word) |>
summarise(word_frequency = n()) |>
arrange(across(word_frequency, desc)) |>
head(10)
print(topwords$word)
tokens |>
filter(word %in% topwords$word) |>
plot_ly(
x = ~Calories,
y = ~`Carb. (g)`,
type = "scatter",
mode = "markers",
color = ~Category,
hoverinfo = "text",
text = ~paste0("Item: ", word)
) |>
layout(
title = "Cal vs Carbs",
xaxis = list(title = "Calories"),
yaxis = list(title = "Carbs"),
hovermode = "compare"
)
sb_nutr_long <- tokens |>
filter(word %in% topwords$word) |>
pivot_longer(cols = c(Calories, `Fat (g)`, `Carb. (g)`, `Fiber (g)`, `Protein (g)`),
names_to = "Nutrient", values_to = "Value")
plot_ly(data = sb_nutr_long, x=~word, y=~Value, color = ~Nutrient, type = "box") |>
layout(title = "Nutrition values for the top 10 items",
xaxis = list(title = "Item Word"),
yaxis = list(title = "Nutrition Value"),
boxmode = "group")
tokens |>
filter(word %in% topwords$word) |>
plot_ly(
x=~Calories,
y=~`Carb. (g)`,
z=~`Protein (g)`,
color=~word,
type = "scatter3d",
mode="markers",
marker=list(size = 5)
) |>
layout(
title = "3D Scatterplot of Calories, Carbs, and Protein",
scene = list(
xaxis = list(title = "Calories"),
yaxis = list(title = "Carbs"),
zaxis = list(title = "Protein")
)
)
# Set up mapping details
set_map_details <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('steelblue')
)
# Make sure both maps are on the same color scale
shadeLimit <- 125
# Create hover text
sb_locs_state$hover <- with(sb_locs_state, paste("Number of Starbucks: ", nstore, '<br>', "State: ", state_name, '<br>', "Population: ", population))
# Create the map
map1 <- plot_geo(sb_locs_state, locationmode = "USA-states") |>
add_trace(z=~nstore, text=~hover, locations=~state, color=~nstore, colors="Purples") |>
layout(title = "Starbucks store by state", geo=set_map_details)
map1
map2 <- plot_geo(sb_locs_state, locationmode = "USA-states") |>
add_trace(z=~population, text=~hover, locations=~state, color=~population, colors="Purples") |>
layout(title = "Starbucks store by state", geo=set_map_details)
map2
subplot(map1, map2)
setwd("/Users/anthonywang/Documents/JSC370-2025/assignments/JSC370---Assignment-5")
pwd
getwd
getwd()
